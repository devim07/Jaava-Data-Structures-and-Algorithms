/*
WAP to implement stack data structure using array.
Write proper functions to perform push, pop, peek, count and display operations.
*/

import java.util.*;

class StackDemo{
	int size=5;
	int s[]=new int[size];
	int top=-1;
	
	boolean isEmpty(){
		return (top<0);
	}
	
	boolean push(int data){
		if(isFull()){
			System.out.println("Stack OVERFLOW - cant add new element!");
			return false;
		}else{
			s[++top]=data;
			return true;
		}
	}
	
	boolean pop(){
		if(isEmpty()){
			System.out.println("Stack EMPTY - cant remove element!");
			return false;
		}else{
			System.out.println(s[top--]+" removed!");
			return true;
		}
	}

	boolean isFull(){
		return(this.top+1>=this.size);
	}
	
	void display(){
		System.out.print("\tStack: Top --->  ");
		for(int i=top; i>=0; i--)
			System.out.print(s[i]+" ");	
		System.out.println();
	}
	
	int peek(){
		return s[top];
	}
	
	int count(){
		return top+1;
	}
		
	
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		StackDemo stk=new StackDemo();
		int choice;
		char cont='y';
		while(cont=='y' || cont=='Y'){
			System.out.println("\n1. Insert\t2. Delete\t3. Display\t4. Peek \t5. Count");
			System.out.print("Enter your choice: ");
			choice=sc.nextInt();
			switch(choice){
				case 1:
					System.out.print("Enter the element you want to add: ");
					stk.push(sc.nextInt());
					break;
				case 2:	stk.pop(); break;
				case 3:	stk.display();break;
				case 4: System.out.println("Element at top of stack is "+stk.peek()); break;
				case 5: System.out.println("There are "+stk.count()+" elements in the stack"); break;
				default:
					System.out.println("You entered a wrong choice!");
			}
			System.out.print("Do you wish to continue? (Y/N): ");
			cont=sc.next().charAt(0);
		}
	}
}
