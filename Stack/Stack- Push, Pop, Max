/*You have an empty sequence, and you will be given n queries. Each query is one of these three types:

1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.

Sample Input
STDIN   Function
-----   --------
10      operations[] size n = 10
1 97    operations = ['1 97', '2', '1 20', ....]
2
1 20
2
1 26
1 20
2
3
1 91
3

Sample Output
26
91*/


import java.io.*;
import java.util.*;
import java.util.Stack;

class Result {
    public static void getMax() {
        Stack <Integer> s=new Stack<>();
        Stack <Integer> max=new Stack <>();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int choice, temp=0, loop=0;
        
        while (loop<n){
            choice=sc.nextInt();
            switch (choice){
                case 1: temp=sc.nextInt();
                    s.push(temp);
                    if(max.isEmpty() || max.peek()<=temp)
                        max.push(s.peek());
                    break;
                case 2: 
                    if (max.peek()==s.peek())
                        max.pop();                        
                    s.pop();
                    break;
                case 3: 
                    System.out.println(max.peek());
            }
            loop++;
        } 
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        Result.getMax();
    }
}
