/*
WAP to implement stack data structure using Linked List.
Write proper functions to perform push, pop, peek, count and display operations.
*/

import java.util.*;

class Stack {
	Node top;
	
	static class Node{
		int data;
		Node next;
		
		Node(int d){
			data=d;
		}
	}
	
	void push(int key){
		if(top==null){
			top=new Node(key);
			return;
		}
		Node n=new Node(key);
		n.next=top;
		top=n;
	}
	
	boolean isEmpty(){
		if(this.top==null){
			System.out.println("Stack is empty");
			return true;
		}
		else 
			return false;
	}
	
	void display(){
		if(isEmpty())
			return;
		System.out.print("\nTop ");
		Node n=top;
		while(n!=null){
			System.out.print("-> "+n.data);
			n=n.next;
		}
		return;
	}
	
	boolean pop(){
		if(isEmpty()){
			System.out.println("Cannot delete");
			return false;
		}
		top=top.next;
		return true;
	}
	
	int peek(){
		return top.data;
	}

	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		Stack s=new Stack();
		System.out.print("Enter the number of elements you want to add:");
		int n=sc.nextInt();
		System.out.print("Enter the elements in the array:");
		for(int i=0; i<n; i++)
			s.push(sc.nextInt());
		char ch='y';
		int choice;
		while(ch=='y' ||ch=='Y'){
			System.out.println("\n1. Push\t2. Pop\t3. Peek\t4. Display");
			System.out.print("Enter your choice: ");
			choice=sc.nextInt();
			switch (choice){
				case 1: System.out.print("Enter the data to push:");
					s.push(sc.nextInt());
					break;
				case 2:
					s.pop();
					break;
				case 3:
					System.out.println("The element at top --- "+s.peek());
					break;
				case 4:
					s.display();
					break;
				default:System.out.println("Invalid choice");
			}
			System.out.print("\nDo you wish to continue (y/n): ");
			ch=sc.next().charAt(0);
		}
	}
}
